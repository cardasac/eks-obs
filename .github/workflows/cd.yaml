name: Continuous Delivery
env:
  PYTHON_VERSION: 3.12
  AWS_REGION: eu-west-1

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "README.md"

permissions:
  id-token: write
  contents: read

jobs:
  tf-apply:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./tf
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::346424633902:role/github-role
          role-session-name: github-session
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform init
        run: |
          terraform init
      - name: Switch workspace
        run: terraform workspace select production
      - name: Terraform apply
        run: |
          terraform apply -auto-approve -input=false -var "region=${AWS_REGION}" -var "environment=production"

  build:
    runs-on: ubuntu-latest
    needs: [tf-apply]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "poetry"
      - run: poetry install --no-root --with dev
      # - name: Lint check
      #   run: make lint >> $GITHUB_STEP_SUMMARY
      # - name: Check format of the code
      #   run: make check-format
      # - name: Run tests
      #   run: |
      #     poetry run pytest --cov=src --cov-branch --cov-report=xml:reports/coverage.xml --junitxml=reports/test-results.xml tests
  docker-push:
    runs-on: ubuntu-latest
    needs: [build]
    concurrency:
      group: docker_push
    outputs:
      output_image: ${{ steps.docker_build.outputs.output_image }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::346424633902:role/github-role
          role-session-name: github-session
          aws-region: ${{ env.AWS_REGION }}
      - name: Configure other AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::058264337640:role/Terraform
          role-session-name: github-session
          role-chaining: true
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: docker_build
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "output_image=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"
          docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest
          docker push $REGISTRY/$REPOSITORY:latest
  tf-helm:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./kubernetes
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::346424633902:role/github-role
          role-session-name: github-session
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform init
        run: |
          terraform init
      - name: Switch workspace
        run: terraform workspace select production
      - name: Terraform apply
        run: |
          terraform apply -auto-approve -input=false -var "region=${AWS_REGION}" -var "environment=production" \
          -var "externalservices_tempo_basicauth_password=${{ secrets.GRAFANA_API_KEY }}" \
          -var "externalservices_loki_basicauth_password=${{ secrets.GRAFANA_API_KEY }}" \
          -var "externalservices_prometheus_basicauth_password=${{ secrets.GRAFANA_API_KEY }}"
